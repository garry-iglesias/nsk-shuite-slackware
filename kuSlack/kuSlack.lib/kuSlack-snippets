#kuSlack-snippets
###############################################################################
# KUSTOM SLACKWARE - RECIPE SNIPPETS MODULE -
###############################################################################
# This exposes the recipe snippets emitters.
# Basically a 'snippet emitter' is just a function which send the snippet
# source to stdout.
# Sometimes it can be just a 'cat-heredoc'.
# But it can also be an external snippet and the emitter just 'filter' that
# external file to replace some @{VARIABLES} values.
###############################################################################

readonly KUSLACK_XSNIPPETS_NAME='kuSlack.resnippets'

###############################################################################
# External snippets functions:
###############################################################################
# It's easier to maintain "non-here-doc" source snippets, as it allows syntax
# highlight and avoid a lot of useless escaping.
# So the xtrn-snippets are just normal text files which are filtered and emit
# to stdout as "normal" baked (here-doc) snippets.

#######################################
# Initialize snippets:
xtrn-snippets-init () {
    SNIPPET_REPLACER="$(nsk-new-replacer)"
    nsk-add-replace "$SNIPPET_REPLACER" \
	'@{KUFLAV_NAME}' "$KUFLAV_NAME" \
	'@{KOOK_INITRD_IMAGE_NAME}' "$KOOK_INITRD_IMAGE_NAME" \
	'@{KOOK_LIVE_NAME}' "$KOOK_LIVE_NAME"
    nsk-close-replacer "$SNIPPET_REPLACER"
}

#######################################
# $1 -> snippet name.
xtrn-snippet () { <"$SCRIPT_DIR/$KUSLACK_XSNIPPETS_NAME/$1" "$SNIPPET_REPLACER" ; }

#######################################
# $@ -> snippets name.
xtrn-snippets () {
    local curSnip
    for curSnip
    do cat "$SCRIPT_DIR/$KUSLACK_XSNIPPETS_NAME/$curSnip"
    done | "$SNIPPET_REPLACER"
}

#######################################
# $1 -> module name to be used as snippet.
xtrn-snippetLib () { <"$SCRIPT_DIR/$KUSLACK_LIBRARY_DIRNAME/$1" "$SNIPPET_REPLACER" ; }

###############################################################################
# Here-doc snippets:
###############################################################################

#######################################
# The head is simply the BASH shebang
# and the basic headers and environment
# setup.
# Also injected the global and public
# interfaces for the flavors.
kuCook-recipeHead () {
    "$LU_CAT" <<RECIPE_HEAD
#!${LU_BASH}
###############################################################################
# ${KUFLAV_NAME} Kustom Slackware.
# ----------------------------------------------------------------------------
# This script is automatically generated by the 'kuSlack' tool. You shouldn't
# modify it directly. You should tweak flavors only in the library (source).
# ----------------------------------------------------------------------------
# WARNING: This script should be run as ROOT ! (or through sudo...).
###############################################################################
set -Cue
###############################################################################
# Kustom Slackware Environment:
###############################################################################
readonly KUSLACK_VERSION='$KUSLACK_VERSION'
readonly KUSLACK_DEBUG=\${KUSLACK_DEBUG:-0}
KUSLACK_VERBOSE=\${KUSLACK_VERBOSE:-$KUSLACK_VERBOSE}
readonly KOOK_NO_INITRD=\${KOOK_NO_INITRD:-0}
readonly KOOK_NO_ISO=\${KOOK_NO_ISO:-\$KOOK_NO_INITRD}
readonly KOOK_BYPASS_LIVE_GEN=\${KOOK_BYPASS_LIVE_GEN:-0}
readonly KOOK_REUSE_PACKAGES=\${KOOK_REUSE_PACKAGES:-0}
readonly KOOK_OVEN='${KOOK_ROOT}'
readonly KOOK_BOOT='${KOOK_BOOT}'
readonly KOOK_BOOT_SNAPSHOT='${KOOK_BOOT}.snapshot'
readonly KOOK_INITRD='${KOOK_INITRD}'
readonly KOOK_LIVE='${KOOK_LIVE}'
readonly KOOK_DATA='${KOOK_DATA}'
readonly KOOK_INITRD_IMAGE='${KOOK_INITRD_IMAGE}'
readonly KOOK_LIVE_OVL='${KOOK_LIVE_OVL}'
readonly KOOK_TARGET_DIR='${DISH_ROOT}'
###############################################################################
# Snap shot:
###############################################################################
#KOOK_LIVE_SNAPSHOT_SAVE="\${KOOK_LIVE_SNAPSHOT_SAVE:-}"
#KOOK_LIVE_SNAPSHOT_LOAD="\${KOOK_LIVE_SNAPSHOT_LOAD:-}"
KOOK_ERROUT="\${KOOK_ERROUT:-/dev/null}"
###############################################################################
# Include configuration:
###############################################################################
. '$KUSLACK_CONFIG_PATH'
###############################################################################
# Tools lookup:
###############################################################################
readonly LU_CHROOT='$LU_CHROOT'
readonly LU_SED='$LU_SED'
readonly LU_CUT='$LU_CUT'
readonly LU_GREP='$LU_GREP'
readonly LU_SORT='$LU_SORT'
readonly LU_FIND='$LU_FIND'
readonly LU_MKTEMP='$LU_MKTEMP'
readonly LU_TR='$LU_TR'
RECIPE_HEAD
    # Add flavors binaries to the recipe PATH:
    [[ -z "$binsPath" ]] || "$LU_CAT" <<PATCH_PATH
#######################################
# Flavors binaries:
export PATH="$binsPath\$PATH"
PATCH_PATH
    [[ -z "$modsPath" ]] || "$LU_CAT" <<MODULES_DIRS
#######################################
# Flavors modules:
KOOK_MODULES_DIRS='${modsPath%?}'
MODULES_DIRS
    # Append the system interface:
    xtrn-snippet 'sysInterface'
    xtrn-snippet 'rootCheck'
    # And the shared-libraries snippets:
    xtrn-snippetLib 'kuSlack-fileOps'
    xtrn-snippetLib 'kuSlack-temp'
    xtrn-snippetLib 'kuSlack-replacer'
}

#######################################
# Well this should be split in two:
#  - 'global' level interface (first script pass: hook registering, parameters settings).
#  - 'process' level interface (next passes: 'inner' API).
# This would reduce this function size AND allow to hide the 'process' interface
# from the global-pass (as usally parameters MUST be set + hooks, before calling
# those functions - package install, config etc.).
kuCook-recipeInterface () {
    # Global interface:
    xtrn-snippet 'globalInterface'
    # Do we need modules ?
    [[ -z "$modsPath" ]] || "$LU_CAT" <<RECIPE_MODULES_INTERFACE
#######################################
# Modules:
# \$1 -> module name.
kuSlack-loadModule () {
    local modName="\$1" dirList eDir modPath
    dirList="\$(<<<"\$KOOK_MODULES_DIRS" '$LU_TR' ':' '\n')"
    while IFS= read eDir || [[ -n \$eDir ]] ; do
        modPath="\$eDir/\$modName"
        if [[ -f "\$modPath" ]] ; then
	    echo "Sourcing Module: \$modName"
            . "\$modPath"
            return 0
        fi
    done <<<"\$dirList"
    nsk-error "Module [\$modName] not found !"
}
RECIPE_MODULES_INTERFACE

    # The process interface:
    xtrn-snippet 'processInterface'
}

#######################################
# Mortar is where user's ingredients ar
# mixed together (RC script, tree templates, ...).
# This should be the place of the
# "flavors definitions"...
kuCook-recipeMortar () {
    "$LU_CAT" - "$KOOK_MORTAR_RC" <<RECIPE_MORTAR_RC
###############################################################################
# ${KUFLAV_NAME} Kustom Slackware - Mortar Run Scripts.
###############################################################################
RECIPE_MORTAR_RC
    # Generate Tree Lists:
    "$LU_CAT" - "$KOOK_MORTAR_LIVE" <<RECIPE_MORTAR_LIVE_HEAD
#######################################
kuSlack-liveTreeList () {
    cat <<LIVE_TREE_LIST
RECIPE_MORTAR_LIVE_HEAD
    "$LU_CAT" - "$KOOK_MORTAR_DATA" <<RECIPE_MORTAR_LIVE_TAIL_DATA_HEAD
LIVE_TREE_LIST
}
#######################################
kuSlack-dataTreeList () {
    cat <<LIVE_DATA_LIST
RECIPE_MORTAR_LIVE_TAIL_DATA_HEAD
    "$LU_CAT" <<RECIPE_MORTAR_DATA_TAIL
LIVE_DATA_LIST
}
RECIPE_MORTAR_DATA_TAIL
}

#######################################
# The tail is all internal plumbing.
# It is not intended to be used directly
# by flavors.
# It is a pure convention as:
#  - it's anyway available in the envi-
# ronment.
#  - and for some "hacks" direct access
# to some of those symbols might be ne-
# cessary...
kuCook-recipeTail () {
    xtrn-snippets \
	'sanityCheck' \
	'processEnv' \
	'squasher' \
	'utilities' \
	'isolinux' \
	'processing'
    #Disabled: 'snapshot'
}
